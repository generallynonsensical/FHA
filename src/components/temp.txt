// src/containers/DataController.tsx

import React, { useState } from 'react';
import InputModule from './InputModule';

interface DataControllerProps {
    // You can add props here if needed, like callbacks for data submission success or error
}

const DataController: React.FC<DataControllerProps> = (props) => {
    // State for managing accordion expanded status
    const [isTaskAccordionExpanded, setTaskAccordionExpanded] = useState(true);
    const [isHazardAccordionExpanded, setHazardAccordionExpanded] = useState(false);
    const [isControlAccordionExpanded, setControlAccordionExpanded] = useState(false);

    // Functions to toggle the state of each accordion
    const toggleTaskAccordion = () => {
        console.log('toggleTaskAccordion called');
        setTaskAccordionExpanded(!isTaskAccordionExpanded);
        setHazardAccordionExpanded(false);
        setControlAccordionExpanded(false);
    };
    const toggleHazardAccordion = () => {
        console.log('toggleHazardAccordion called');
        setTaskAccordionExpanded(false);
        setHazardAccordionExpanded(!isHazardAccordionExpanded);
        setControlAccordionExpanded(false);
    };
    const toggleControlAccordion = () => {
        console.log('toggleControlAccordion called');
        setTaskAccordionExpanded(false);
        setHazardAccordionExpanded(false);
        setControlAccordionExpanded(!isControlAccordionExpanded);
    };

    // Generic handler for submissions; adapt as necessary
    const handleSubmit = async (data: any, module: string) => {
        console.log("Submitting form for module:", module);
        // Validate data
        if (module === 'task') {
            // ... validation logic for task module ...
        } else if (module === 'hazard') {
            // ... validation logic for hazard module ...
        } else if (module === 'control') {
            // ... validation logic for control module ...
        }

        // ... submission logic ...
    };

    return (
        <InputModule
            isTaskExpanded={isTaskAccordionExpanded}
            isHazardExpanded={isHazardAccordionExpanded}
            isControlExpanded={isControlAccordionExpanded}
            toggleTask={toggleTaskAccordion}
            toggleHazard={toggleHazardAccordion}
            toggleControl={toggleControlAccordion}
            handleSubmit={handleSubmit}
        />
    );
};

export default DataController;